/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config
It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.
We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md
Happy linting! ðŸ’–
*/
module.exports = {
	root: true,
	env: {
		browser: true,
		es6: true,
		node: true,
	},
	extends: ['prettier', 'prettier/@typescript-eslint'],
	parser: '@typescript-eslint/parser',
	ignorePatterns: ['.eslintrc.js'],
	parserOptions: {
		project: 'tsconfig.json',
		sourceType: 'module',
	},
	plugins: ['eslint-plugin-import', 'header', '@angular-eslint/eslint-plugin', '@typescript-eslint'],
	rules: {
		'@angular-eslint/component-class-suffix': 'error',
		'@angular-eslint/component-selector': [
			'error',
			{
				type: 'element',
				prefix: 'app',
				style: 'kebab-case',
			},
		],
		'@angular-eslint/directive-class-suffix': 'error',
		'@angular-eslint/directive-selector': [
			'error',
			{
				type: 'attribute',
				prefix: 'app',
				style: 'camelCase',
			},
		],
		'@angular-eslint/no-host-metadata-property': 'error',
		'@angular-eslint/no-input-rename': 'error',
		'@angular-eslint/no-inputs-metadata-property': 'error',
		'@angular-eslint/no-output-on-prefix': 'error',
		'@angular-eslint/no-output-rename': 'error',
		'@angular-eslint/no-outputs-metadata-property': 'error',
		'@angular-eslint/use-lifecycle-interface': 'error',
		'@angular-eslint/use-pipe-transform-interface': 'error',
		'@typescript-eslint/array-type': [
			'error',
			{
				default: 'generic',
			},
		],
		'@typescript-eslint/consistent-type-definitions': 'error',
		'@typescript-eslint/dot-notation': 'off',
		'@typescript-eslint/explicit-member-accessibility': [
			'off',
			{
				accessibility: 'explicit',
			},
		],
		'@typescript-eslint/indent': 'off',
		'@typescript-eslint/member-delimiter-style': [
			'error',
			{
				multiline: {
					delimiter: 'semi',
					requireLast: true,
				},
				singleline: {
					delimiter: 'semi',
					requireLast: false,
				},
			},
		],
		/*
		'@typescript-eslint/member-ordering': 'error',
		*/
		'@typescript-eslint/naming-convention': [
			'error',
			{
				selector: 'variable',
				format: ['camelCase', 'PascalCase', 'UPPER_CASE', 'snake_case'],
				leadingUnderscore: 'allow',
			},
		],
		'@typescript-eslint/no-empty-function': 'off',
		'@typescript-eslint/no-empty-interface': 'error',
		'@typescript-eslint/no-inferrable-types': [
			'error',
			{
				ignoreParameters: true,
			},
		],
		'@typescript-eslint/no-misused-new': 'error',
		'@typescript-eslint/no-non-null-assertion': 'error',
		'@typescript-eslint/no-shadow': [
			'error',
			{
				hoist: 'all',
			},
		],
		'@typescript-eslint/no-unused-expressions': 'error',
		'@typescript-eslint/prefer-function-type': 'error',
		'@typescript-eslint/quotes': ['error', 'single', { avoidEscape: true }],
		'@typescript-eslint/semi': ['error', 'always'],
		'@typescript-eslint/type-annotation-spacing': 'error',
		'@typescript-eslint/unified-signatures': 'error',
		'arrow-body-style': 'error',
		// 'brace-style': ['error', '1tbs'],
		'comma-dangle': [
			'error',
			{
				arrays: 'always-multiline',
				objects: 'always-multiline',
				functions: 'never',
				imports: 'always-multiline',
				exports: 'always-multiline',
			},
		],
		'constructor-super': 'error',
		curly: 'error',
		'eol-last': 'error',
		eqeqeq: ['error', 'smart'],
		'guard-for-in': 'error',
		'header/header': [
			1,
			'block',
			[
				{
					pattern: '\\*',
					template: '*',
				},
				{
					pattern: ' \\* \\d{4} SAP SE or an SAP affiliate company. All rights reserved.',
					template: ' * 2025 SAP SE or an SAP affiliate company. All rights reserved.',
				},
				{
					pattern: ' ',
					template: ' ',
				},
			],
		],
		'id-blacklist': 'off',
		'id-match': 'off',
		'import/no-deprecated': 'warn',
		'import/order': 'error',
		'max-len': [
			'error',
			{
				code: 200,
				ignorePattern: 'data:image/[svg,png].*',
			},
		],
		'no-bitwise': 'error',
		'no-caller': 'error',
		'no-console': [
			'error',
			{
				allow: [
					'warn',
					'dir',
					'timeLog',
					'assert',
					'clear',
					'count',
					'countReset',
					'group',
					'groupEnd',
					'table',
					'dirxml',
					'error',
					'groupCollapsed',
					'Console',
					'profile',
					'profileEnd',
					'timeStamp',
					'context',
				],
			},
		],
		'no-debugger': 'error',
		'no-empty': 'off',
		'no-eval': 'error',
		'no-fallthrough': 'error',
		'no-new-wrappers': 'error',
		'no-redeclare': 'error',
		'no-restricted-globals': [
			'error',
			{
				name: 'fdescribe',
				message: "Do not commit 'fdescribe'. Use 'describe' instead.",
			},
			{
				name: 'fit',
				message: "Do not commit 'fit'. Use 'it' instead.",
			},
		],
		'no-restricted-imports': 'error',
		'no-throw-literal': 'error',
		'no-trailing-spaces': 'error',
		'no-undef-init': 'error',
		'no-underscore-dangle': 'off',
		'no-unused-labels': 'error',
		'no-var': 'error',
		'prefer-const': 'error',
		'quote-props': ['error', 'as-needed'],
		radix: 'error',
		'space-before-function-paren': [
			'error',
			{
				anonymous: 'always',
				asyncArrow: 'always',
				named: 'never',
			},
		],
		'spaced-comment': [
			'error',
			'always',
			{
				markers: ['/'],
			},
		],
		'@typescript-eslint/explicit-function-return-type': [
			'error',
			{
				allowExpressions: true,
			},
		],
	},
	overrides: [
		{
			files: ['*.spec.ts', '*.mock.ts'],
			rules: {
				'@typescript-eslint/explicit-function-return-type': 'off',
			},
		},
	],
};
